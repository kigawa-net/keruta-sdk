name: Create release branch from develop

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Version bump type (major/feature/fix)'
        required: true
        type: choice
        options:
          - major
          - feature
          - fix
        default: feature

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Validate inputs
        id: validate
        run: |
          BUMP='${{ github.event.inputs.bump }}'
          echo "Input bump: $BUMP"

          case "$BUMP" in
            major|feature|fix) ;;
            *) echo "bump must be one of: major, feature, fix" >&2; exit 1 ;;
          esac

          echo "bump=$BUMP" >> $GITHUB_OUTPUT

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Fetch all branches and tags
        run: |
          git fetch origin --tags
          git branch -a
          git tag -l | sort -V | tail -n 20

      - name: Determine next version
        id: version
        shell: bash
        run: |
          set -euo pipefail
          BUMP='${{ steps.validate.outputs.bump }}'

          # Find latest semver tag (prefers vX.Y.Z, falls back to X.Y.Z)
          LATEST_TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1)
          if [[ -z "$LATEST_TAG" ]]; then
            LATEST_TAG=$(git tag -l '[0-9]*.[0-9]*.[0-9]*' --sort=-v:refname | head -n1)
          fi

          if [[ -z "$LATEST_TAG" ]]; then
            BASE_VERSION="0.0.0"
            echo "No existing tags found. Starting from $BASE_VERSION"
          else
            BASE_VERSION="$LATEST_TAG"
          fi

          # Strip leading 'v' if present
          BASE_VERSION=${BASE_VERSION#v}
          echo "Latest version: $BASE_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"


          case "$BUMP" in
            major)
              MAJOR=$((MAJOR + 1)); MINOR=0; PATCH=0 ;;
            feature)
              MINOR=$((MINOR + 1)); PATCH=0 ;;
            fix)
              PATCH=$((PATCH + 1)) ;;
          esac

          NEXT_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "Calculated next version: $NEXT_VERSION (bump=$BUMP)"

          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Ensure develop exists on remote
        run: |
          if ! git ls-remote --exit-code --heads origin develop; then
            echo "Remote branch 'develop' does not exist." >&2
            exit 1
          fi

      - name: Create release branch from develop
        id: create_branch
        run: |
          VERSION='${{ steps.version.outputs.version }}'
          RELEASE_BRANCH="release/v$VERSION"

          # Check if release branch already exists remotely
          if git ls-remote --exit-code --heads origin "$RELEASE_BRANCH"; then
            echo "Branch $RELEASE_BRANCH already exists on remote. Skipping creation." >&2
            exit 1
          fi

          # Create branch from origin/develop and push
          git checkout -B "$RELEASE_BRANCH" origin/develop
          git push -u origin "$RELEASE_BRANCH"

          echo "branch_name=$RELEASE_BRANCH" >> $GITHUB_OUTPUT

      - name: Create Pull Request to main
        id: create_pr
        uses: actions/github-script@v7
        with:
          script: |
            const branch = `${{ steps.create_branch.outputs.branch_name }}`;
            const version = `${{ steps.version.outputs.version }}`;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const title = `Release v${version}`;
            const body = [
              `This PR merges the release branch into main.`,
              `- Version: v${version}`,
              `- Source: ${branch}`,
              `- Created by: GitHub Actions`
            ].join('\n');

            // initialize outputs
            core.setOutput('pr_number', '');
            core.setOutput('pr_url', '');
            core.setOutput('issue_number', '');
            core.setOutput('issue_url', '');

            // Check if PR already exists
            const { data: existing } = await github.rest.pulls.list({
              owner,
              repo,
              state: 'open',
              head: `${owner}:${branch}`,
              base: 'main',
              per_page: 1
            });
            if (existing && existing.length > 0) {
              core.info(`PR already exists: ${existing[0].html_url}`);
              core.setOutput('pr_number', existing[0].number.toString());
              core.setOutput('pr_url', existing[0].html_url);
            } else {
              try {
                const { data: pr } = await github.rest.pulls.create({
                  owner,
                  repo,
                  head: branch,
                  base: 'main',
                  title,
                  body
                });
                core.info(`Created PR: ${pr.html_url}`);
                core.setOutput('pr_number', pr.number.toString());
                core.setOutput('pr_url', pr.html_url);
              } catch (e) {
                // Handle org policy that prevents Actions from creating PRs
                if (e.status === 403) {
                  core.notice('Policy prevents GitHub Actions from creating pull requests. Creating an issue instead.');
                  const issueTitle = `Manual action required: Create PR for release v${version}`;
                  const issueBody = [
                    `This repository's policy prevents GitHub Actions from creating pull requests.`,
                    `A release branch has been created: \\`${branch}\\`.`,
                    `Please manually create a PR from \\`${branch}\\` to \\`main\\`.`,
                    '',
                    `Context:`,
                    `- Version: v${version}`,
                    `- Attempted PR title: ${title}`,
                    `- Triggered by: ${context.actor}`,
                    `- Workflow run: ${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`
                  ].join('\n');
                  const { data: issue } = await github.rest.issues.create({ owner, repo, title: issueTitle, body: issueBody });
                  core.info(`Created Issue: ${issue.html_url}`);
                  core.setOutput('issue_number', issue.number.toString());
                  core.setOutput('issue_url', issue.html_url);
                } else if (e.status === 422) {
                  core.notice('No changes to create a PR (branches are already in sync).');
                } else {
                  throw e;
                }
              }
            }

      - name: Summary
        run: |
          {
            echo "Created branch: ${{ steps.create_branch.outputs.branch_name }} from origin/develop (version=${{ steps.version.outputs.version }}, bump=${{ steps.validate.outputs.bump }})";
            if [ -n "${{ steps.create_pr.outputs.pr_url }}" ]; then
              echo "PR to main: ${{ steps.create_pr.outputs.pr_url }} (#{${{ steps.create_pr.outputs.pr_number }}})";
            elif [ -n "${{ steps.create_pr.outputs.issue_url }}" ]; then
              echo "Notice: Policy prevents GitHub Actions from creating pull requests. Creating an issue instead: ${{ steps.create_pr.outputs.issue_url }} (#{${{ steps.create_pr.outputs.issue_number }}})";
            fi
          } >> $GITHUB_STEP_SUMMARY

